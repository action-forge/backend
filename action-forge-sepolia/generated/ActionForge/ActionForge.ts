// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ActionExecuted extends ethereum.Event {
  get params(): ActionExecuted__Params {
    return new ActionExecuted__Params(this);
  }
}

export class ActionExecuted__Params {
  _event: ActionExecuted;

  constructor(event: ActionExecuted) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get option(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get actionType(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class ActionForgeRegistered extends ethereum.Event {
  get params(): ActionForgeRegistered__Params {
    return new ActionForgeRegistered__Params(this);
  }
}

export class ActionForgeRegistered__Params {
  _event: ActionForgeRegistered;

  constructor(event: ActionForgeRegistered) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get actionForgeId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get upkeepId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get createdBy(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get proposal(): ActionForgeRegisteredProposalStruct {
    return changetype<ActionForgeRegisteredProposalStruct>(
      this._event.parameters[4].value.toTuple()
    );
  }
}

export class ActionForgeRegisteredProposalStruct extends ethereum.Tuple {
  get snapshotId(): Bytes {
    return this[0].toBytes();
  }

  get actionForgeId(): Bytes {
    return this[1].toBytes();
  }

  get endTime(): BigInt {
    return this[2].toBigInt();
  }

  get actions(): Array<ActionForgeRegisteredProposalActionsStruct> {
    return this[3].toTupleArray<ActionForgeRegisteredProposalActionsStruct>();
  }

  get executed(): boolean {
    return this[4].toBoolean();
  }

  get winnerOption(): BigInt {
    return this[5].toBigInt();
  }
}

export class ActionForgeRegisteredProposalActionsStruct extends ethereum.Tuple {
  get actionType(): i32 {
    return this[0].toI32();
  }

  get txData(): Bytes {
    return this[1].toBytes();
  }
}

export class ETHReceived extends ethereum.Event {
  get params(): ETHReceived__Params {
    return new ETHReceived__Params(this);
  }
}

export class ETHReceived__Params {
  _event: ETHReceived;

  constructor(event: ETHReceived) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RequestFulfilled extends ethereum.Event {
  get params(): RequestFulfilled__Params {
    return new RequestFulfilled__Params(this);
  }
}

export class RequestFulfilled__Params {
  _event: RequestFulfilled;

  constructor(event: RequestFulfilled) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class RequestSent extends ethereum.Event {
  get params(): RequestSent__Params {
    return new RequestSent__Params(this);
  }
}

export class RequestSent__Params {
  _event: RequestSent;

  constructor(event: RequestSent) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class Response extends ethereum.Event {
  get params(): Response__Params {
    return new Response__Params(this);
  }
}

export class Response__Params {
  _event: Response;

  constructor(event: Response) {
    this._event = event;
  }

  get requestId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get response(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get err(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class ActionForge__checkUpkeepResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getUpkeepNeeded(): boolean {
    return this.value0;
  }

  getPerformData(): Bytes {
    return this.value1;
  }
}

export class ActionForge__proposalsResult {
  value0: Bytes;
  value1: Bytes;
  value2: BigInt;
  value3: boolean;
  value4: BigInt;

  constructor(
    value0: Bytes,
    value1: Bytes,
    value2: BigInt,
    value3: boolean,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getSnapshotId(): Bytes {
    return this.value0;
  }

  getActionForgeId(): Bytes {
    return this.value1;
  }

  getEndTime(): BigInt {
    return this.value2;
  }

  getExecuted(): boolean {
    return this.value3;
  }

  getWinnerOption(): BigInt {
    return this.value4;
  }
}

export class ActionForge extends ethereum.SmartContract {
  static bind(address: Address): ActionForge {
    return new ActionForge("ActionForge", address);
  }

  aaveEthAsset(): Address {
    let result = super.call("aaveEthAsset", "aaveEthAsset():(address)", []);

    return result[0].toAddress();
  }

  try_aaveEthAsset(): ethereum.CallResult<Address> {
    let result = super.tryCall("aaveEthAsset", "aaveEthAsset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aaveOracle(): Address {
    let result = super.call("aaveOracle", "aaveOracle():(address)", []);

    return result[0].toAddress();
  }

  try_aaveOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("aaveOracle", "aaveOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aavePoolProxy(): Address {
    let result = super.call("aavePoolProxy", "aavePoolProxy():(address)", []);

    return result[0].toAddress();
  }

  try_aavePoolProxy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "aavePoolProxy",
      "aavePoolProxy():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aaveWrappedTokenGatewayV3(): Address {
    let result = super.call(
      "aaveWrappedTokenGatewayV3",
      "aaveWrappedTokenGatewayV3():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_aaveWrappedTokenGatewayV3(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "aaveWrappedTokenGatewayV3",
      "aaveWrappedTokenGatewayV3():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bytes32ToBytes(data: Bytes): Bytes {
    let result = super.call(
      "bytes32ToBytes",
      "bytes32ToBytes(bytes32):(bytes)",
      [ethereum.Value.fromFixedBytes(data)]
    );

    return result[0].toBytes();
  }

  try_bytes32ToBytes(data: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "bytes32ToBytes",
      "bytes32ToBytes(bytes32):(bytes)",
      [ethereum.Value.fromFixedBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  bytes32ToString(_bytes32: Bytes): string {
    let result = super.call(
      "bytes32ToString",
      "bytes32ToString(bytes32):(string)",
      [ethereum.Value.fromFixedBytes(_bytes32)]
    );

    return result[0].toString();
  }

  try_bytes32ToString(_bytes32: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall(
      "bytes32ToString",
      "bytes32ToString(bytes32):(string)",
      [ethereum.Value.fromFixedBytes(_bytes32)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  chainLinkAddress(): Address {
    let result = super.call(
      "chainLinkAddress",
      "chainLinkAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_chainLinkAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "chainLinkAddress",
      "chainLinkAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  checkUpkeep(checkData: Bytes): ActionForge__checkUpkeepResult {
    let result = super.call("checkUpkeep", "checkUpkeep(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(checkData)
    ]);

    return new ActionForge__checkUpkeepResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkUpkeep(
    checkData: Bytes
  ): ethereum.CallResult<ActionForge__checkUpkeepResult> {
    let result = super.tryCall(
      "checkUpkeep",
      "checkUpkeep(bytes):(bool,bytes)",
      [ethereum.Value.fromBytes(checkData)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ActionForge__checkUpkeepResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  convertBytesToUint(checkData: Bytes): BigInt {
    let result = super.call(
      "convertBytesToUint",
      "convertBytesToUint(bytes):(uint256)",
      [ethereum.Value.fromBytes(checkData)]
    );

    return result[0].toBigInt();
  }

  try_convertBytesToUint(checkData: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertBytesToUint",
      "convertBytesToUint(bytes):(uint256)",
      [ethereum.Value.fromBytes(checkData)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertUintToBytes(timestamp: BigInt): Bytes {
    let result = super.call(
      "convertUintToBytes",
      "convertUintToBytes(uint256):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBytes();
  }

  try_convertUintToBytes(timestamp: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "convertUintToBytes",
      "convertUintToBytes(uint256):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  daiContract(): Address {
    let result = super.call("daiContract", "daiContract():(address)", []);

    return result[0].toAddress();
  }

  try_daiContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("daiContract", "daiContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  donID(): Bytes {
    let result = super.call("donID", "donID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_donID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("donID", "donID():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ethDeposited(param0: Address): BigInt {
    let result = super.call("ethDeposited", "ethDeposited(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_ethDeposited(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ethDeposited",
      "ethDeposited(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gasLimit(): BigInt {
    let result = super.call("gasLimit", "gasLimit():(uint32)", []);

    return result[0].toBigInt();
  }

  try_gasLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gasLimit", "gasLimit():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ghoToken(): Address {
    let result = super.call("ghoToken", "ghoToken():(address)", []);

    return result[0].toAddress();
  }

  try_ghoToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("ghoToken", "ghoToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nonce(): BigInt {
    let result = super.call("nonce", "nonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonce", "nonce():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposalMap(param0: Address, param1: BigInt): Bytes {
    let result = super.call(
      "proposalMap",
      "proposalMap(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBytes();
  }

  try_proposalMap(param0: Address, param1: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proposalMap",
      "proposalMap(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  proposals(param0: Bytes): ActionForge__proposalsResult {
    let result = super.call(
      "proposals",
      "proposals(bytes32):(bytes32,bytes32,uint256,bool,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new ActionForge__proposalsResult(
      result[0].toBytes(),
      result[1].toBytes(),
      result[2].toBigInt(),
      result[3].toBoolean(),
      result[4].toBigInt()
    );
  }

  try_proposals(
    param0: Bytes
  ): ethereum.CallResult<ActionForge__proposalsResult> {
    let result = super.tryCall(
      "proposals",
      "proposals(bytes32):(bytes32,bytes32,uint256,bool,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ActionForge__proposalsResult(
        value[0].toBytes(),
        value[1].toBytes(),
        value[2].toBigInt(),
        value[3].toBoolean(),
        value[4].toBigInt()
      )
    );
  }

  requestMap(param0: Bytes): Bytes {
    let result = super.call("requestMap", "requestMap(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBytes();
  }

  try_requestMap(param0: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("requestMap", "requestMap(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  scheduler(): Address {
    let result = super.call("scheduler", "scheduler():(address)", []);

    return result[0].toAddress();
  }

  try_scheduler(): ethereum.CallResult<Address> {
    let result = super.tryCall("scheduler", "scheduler():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sdaiContract(): Address {
    let result = super.call("sdaiContract", "sdaiContract():(address)", []);

    return result[0].toAddress();
  }

  try_sdaiContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("sdaiContract", "sdaiContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  source(): string {
    let result = super.call("source", "source():(string)", []);

    return result[0].toString();
  }

  try_source(): ethereum.CallResult<string> {
    let result = super.tryCall("source", "source():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  subscriptionId(): BigInt {
    let result = super.call("subscriptionId", "subscriptionId():(uint64)", []);

    return result[0].toBigInt();
  }

  try_subscriptionId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "subscriptionId",
      "subscriptionId():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uniswapRouter(): Address {
    let result = super.call("uniswapRouter", "uniswapRouter():(address)", []);

    return result[0].toAddress();
  }

  try_uniswapRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapRouter",
      "uniswapRouter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  upkeepContract(): Address {
    let result = super.call("upkeepContract", "upkeepContract():(address)", []);

    return result[0].toAddress();
  }

  try_upkeepContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "upkeepContract",
      "upkeepContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _subscriptionId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _source(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _gasLimit(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _donID(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BorrowGHOCall extends ethereum.Call {
  get inputs(): BorrowGHOCall__Inputs {
    return new BorrowGHOCall__Inputs(this);
  }

  get outputs(): BorrowGHOCall__Outputs {
    return new BorrowGHOCall__Outputs(this);
  }
}

export class BorrowGHOCall__Inputs {
  _call: BorrowGHOCall;

  constructor(call: BorrowGHOCall) {
    this._call = call;
  }

  get dataBytes(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class BorrowGHOCall__Outputs {
  _call: BorrowGHOCall;

  constructor(call: BorrowGHOCall) {
    this._call = call;
  }
}

export class BuySDAICall extends ethereum.Call {
  get inputs(): BuySDAICall__Inputs {
    return new BuySDAICall__Inputs(this);
  }

  get outputs(): BuySDAICall__Outputs {
    return new BuySDAICall__Outputs(this);
  }
}

export class BuySDAICall__Inputs {
  _call: BuySDAICall;

  constructor(call: BuySDAICall) {
    this._call = call;
  }

  get dataBytes(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class BuySDAICall__Outputs {
  _call: BuySDAICall;

  constructor(call: BuySDAICall) {
    this._call = call;
  }
}

export class HandleOracleFulfillmentCall extends ethereum.Call {
  get inputs(): HandleOracleFulfillmentCall__Inputs {
    return new HandleOracleFulfillmentCall__Inputs(this);
  }

  get outputs(): HandleOracleFulfillmentCall__Outputs {
    return new HandleOracleFulfillmentCall__Outputs(this);
  }
}

export class HandleOracleFulfillmentCall__Inputs {
  _call: HandleOracleFulfillmentCall;

  constructor(call: HandleOracleFulfillmentCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get response(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get err(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class HandleOracleFulfillmentCall__Outputs {
  _call: HandleOracleFulfillmentCall;

  constructor(call: HandleOracleFulfillmentCall) {
    this._call = call;
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get performData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}

export class RegisterProposalCall extends ethereum.Call {
  get inputs(): RegisterProposalCall__Inputs {
    return new RegisterProposalCall__Inputs(this);
  }

  get outputs(): RegisterProposalCall__Outputs {
    return new RegisterProposalCall__Outputs(this);
  }
}

export class RegisterProposalCall__Inputs {
  _call: RegisterProposalCall;

  constructor(call: RegisterProposalCall) {
    this._call = call;
  }

  get proposalData(): RegisterProposalCallProposalDataStruct {
    return changetype<RegisterProposalCallProposalDataStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class RegisterProposalCall__Outputs {
  _call: RegisterProposalCall;

  constructor(call: RegisterProposalCall) {
    this._call = call;
  }
}

export class RegisterProposalCallProposalDataStruct extends ethereum.Tuple {
  get snapshotId(): Bytes {
    return this[0].toBytes();
  }

  get actionForgeId(): Bytes {
    return this[1].toBytes();
  }

  get endTime(): BigInt {
    return this[2].toBigInt();
  }

  get actions(): Array<RegisterProposalCallProposalDataActionsStruct> {
    return this[3].toTupleArray<
      RegisterProposalCallProposalDataActionsStruct
    >();
  }

  get executed(): boolean {
    return this[4].toBoolean();
  }

  get winnerOption(): BigInt {
    return this[5].toBigInt();
  }
}

export class RegisterProposalCallProposalDataActionsStruct extends ethereum.Tuple {
  get actionType(): i32 {
    return this[0].toI32();
  }

  get txData(): Bytes {
    return this[1].toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAaveParamsCall extends ethereum.Call {
  get inputs(): SetAaveParamsCall__Inputs {
    return new SetAaveParamsCall__Inputs(this);
  }

  get outputs(): SetAaveParamsCall__Outputs {
    return new SetAaveParamsCall__Outputs(this);
  }
}

export class SetAaveParamsCall__Inputs {
  _call: SetAaveParamsCall;

  constructor(call: SetAaveParamsCall) {
    this._call = call;
  }

  get _aaveWrappedTokenGatewayV3(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _aavePoolProxy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ghoToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _aaveOracle(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _aaveEthAsset(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class SetAaveParamsCall__Outputs {
  _call: SetAaveParamsCall;

  constructor(call: SetAaveParamsCall) {
    this._call = call;
  }
}

export class SetSchedulerCall extends ethereum.Call {
  get inputs(): SetSchedulerCall__Inputs {
    return new SetSchedulerCall__Inputs(this);
  }

  get outputs(): SetSchedulerCall__Outputs {
    return new SetSchedulerCall__Outputs(this);
  }
}

export class SetSchedulerCall__Inputs {
  _call: SetSchedulerCall;

  constructor(call: SetSchedulerCall) {
    this._call = call;
  }

  get _scheduler(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSchedulerCall__Outputs {
  _call: SetSchedulerCall;

  constructor(call: SetSchedulerCall) {
    this._call = call;
  }
}

export class SetSparkParamsCall extends ethereum.Call {
  get inputs(): SetSparkParamsCall__Inputs {
    return new SetSparkParamsCall__Inputs(this);
  }

  get outputs(): SetSparkParamsCall__Outputs {
    return new SetSparkParamsCall__Outputs(this);
  }
}

export class SetSparkParamsCall__Inputs {
  _call: SetSparkParamsCall;

  constructor(call: SetSparkParamsCall) {
    this._call = call;
  }

  get _sdaiContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _daiContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetSparkParamsCall__Outputs {
  _call: SetSparkParamsCall;

  constructor(call: SetSparkParamsCall) {
    this._call = call;
  }
}

export class SetUniswapParamsCall extends ethereum.Call {
  get inputs(): SetUniswapParamsCall__Inputs {
    return new SetUniswapParamsCall__Inputs(this);
  }

  get outputs(): SetUniswapParamsCall__Outputs {
    return new SetUniswapParamsCall__Outputs(this);
  }
}

export class SetUniswapParamsCall__Inputs {
  _call: SetUniswapParamsCall;

  constructor(call: SetUniswapParamsCall) {
    this._call = call;
  }

  get _uniswapRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetUniswapParamsCall__Outputs {
  _call: SetUniswapParamsCall;

  constructor(call: SetUniswapParamsCall) {
    this._call = call;
  }
}

export class SwapEthForTokenCall extends ethereum.Call {
  get inputs(): SwapEthForTokenCall__Inputs {
    return new SwapEthForTokenCall__Inputs(this);
  }

  get outputs(): SwapEthForTokenCall__Outputs {
    return new SwapEthForTokenCall__Outputs(this);
  }
}

export class SwapEthForTokenCall__Inputs {
  _call: SwapEthForTokenCall;

  constructor(call: SwapEthForTokenCall) {
    this._call = call;
  }

  get ethAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenAmountOutMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapEthForTokenCall__Outputs {
  _call: SwapEthForTokenCall;

  constructor(call: SwapEthForTokenCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferERC20Call extends ethereum.Call {
  get inputs(): TransferERC20Call__Inputs {
    return new TransferERC20Call__Inputs(this);
  }

  get outputs(): TransferERC20Call__Outputs {
    return new TransferERC20Call__Outputs(this);
  }
}

export class TransferERC20Call__Inputs {
  _call: TransferERC20Call;

  constructor(call: TransferERC20Call) {
    this._call = call;
  }

  get dataBytes(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class TransferERC20Call__Outputs {
  _call: TransferERC20Call;

  constructor(call: TransferERC20Call) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
